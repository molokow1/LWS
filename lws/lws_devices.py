from abc import ABC, abstractmethod, abstractproperty
from enum import Enum

import simpy
from lws.lws_utils import ConfigReader, airtime


class DeviceType(Enum):
    END_DEVICE = 1
    BASE_STATION = 2


class PacketStatus(Enum):
    SUCCESS = 1
    LOST = 2
    COLLIDED = 3

class PacketType(Enum):
    Data = 1
    DataAck = 2
    ACK = 3
    LinkCheckReq = 4
    LinkCheckAns = 5
    LinkADRReq = 6
    LinkADRAns = 7
    DutyCycleReq = 8
    DutyCycleAns = 9
    RXParamsSetupReq = 10
    RXParamSetupAns = 11
    DevStatusReq = 12
    DevStatusAns = 13
    NewChaneelReq = 14
    NewChannelAns = 15
    RXTimingSetupReq = 16
    RXTimingSetupAns = 17

class TransmissionManager:
    
    def __init__(self, env, lora_params):
        self.env = env
        self.store = simpy.Store(self.env)
        self.lora_params = lora_params
        self.latency = airtime(
            sf=self.lora_params['sf'],
            cr=self.lora_params['cr'],
            pl=self.lora_params['pl'],
            bw=self.lora_params['bw'],
        )

    def air_time_latency(self, value):
        yield self.env.timeout(self.latency)
        self.store.put(value)

    def put_value(self, value):
        self.env.process(self.air_time_latency(value))

    def get_value(self):
        return self.store.get()
        
        


class Packet(object):
    def __init__(self, pkt_len, device_id, device_type, packet_type, timestamp, global_config):
        self.device_id = device_id
        self.device_type = device_type
        self.pkt_len = pkt_len
        self.packet_type = packet_type
        self.global_config = global_config
        self.timestamp = timestamp
        self.set_lora_params()
    
    def set_lora_params(self):
        self.sf = self.global_config.nodeSF
        self.cr = self.global_config.nodeCR
        self.bw = self.global_config.nodeBW
        self.tx_pow = self.global_config.pTx

        # self.trans_range = 150
        self.symbol_time = (2.0**self.sf)/self.bw
        # self.arrive_time = 0
        self.airtime = airtime(self.sf, self.cr, self.pkt_len, self.bw)

    def __repr__(self):
        return "{} packet generated by {}[{}] with a length of {} bytes".format(self.packet_type, self.device_type, self.device_id, self.pkt_len)

    

class LWSDevice(ABC):

    def __init__(self, device_id, x, y, dist, global_config, env):
        super().__init__()

        self.env = env
        self.send_conns = {}
        self.recv_conns = {}

        self.device_id = device_id
        self._x = x 
        self._y = y
        self.global_config = global_config
        self.dist = dist

        self.init_params()

        self._num_pkt_sent = 0 
        self._num_pkt_received = 0

        self._pkt_loss_count = 0
        self._pkt_collision_count = 0
        
        self.event_list = []
        
    def add_event(self, timestamp, event):
        self.event_list.append({
            "timestamp" : timestamp,
            "event"     : event
        })

    def init_params(self):
        #TODO: change the global_config attributes to better names e.g. device_sf
        self.sf = self.global_config.nodeSF
        self.cr = self.global_config.nodeCR 
        self.bw = self.global_config.nodeBW
        self.txPow = self.global_config.pTx

    @abstractmethod
    def send_packet(self, packet, target_device):
        pass 
    
    @abstractmethod
    def receive_packet(self, packet, from_device, status, timestamp):
        pass

    @abstractmethod
    def create_sending_connection(self, device_id):
        pass 

    @abstractmethod
    def add_receiving_connection(self, device_id, conn):
        pass

    @abstractmethod
    def sim_process(self, env):
        pass

    def make_packet(self, packet_type, length, timestamp):
        packet = Packet(pkt_len=length, device_id=self.device_id,device_type=self.device_type, packet_type=packet_type, timestamp=timestamp, global_config=self.global_config)
        return packet

    @property
    def num_pkt_sent(self):
        return self.num_pkt_sent

    @property
    def num_pkt_received(self):
        return self._num_pkt_received

    @property
    def pkt_collision_count(self):
        return self.pkt_collision_count
    
    @property
    def pkt_loss_count(self):
        return self.pkt_loss_count
        
    @abstractproperty
    def device_type(self):
        raise NotImplementedError


class EndDevice(LWSDevice):

    device_type = DeviceType.END_DEVICE

    def __init__(self, device_id, x, y, dist, global_config, pkt_type, env):
        super().__init__(device_id, x, y, dist, global_config, env)
        self.pkt_type = pkt_type

        #end_device specific stats
        self._num_pkt_retransmitted = 0
        self._downlink_loss_count = 0
        

    def create_sending_connection(self, device_id):
        self.send_conns[device_id] = simpy.Store(self.env)
        return self.send_conns[device_id]
    
    def add_receiving_connection(self, device_id, conn):
        self.recv_conns[device_id] = conn 

    def sim_process(self, env):
        pass

    def send_packet(self, packet, target_device, timestamp):
        # print("Sent packet {} to target_device {}".format(packet, target_device))
        #generate a packet to send and return the packet
        #packet = device.send_packet(target_device, timestamp)
        #target_device.received_packet(packet, ...)
        # packet = self.make_packet(self.pkt_type, self.global_config.plen, timestamp)
        yield self.send_conns[target_device].put(packet)
        print("{} sent at {}".format(packet,self.env.now))
        self._num_pkt_sent += 1 
        # print(self.send_conns[target_device].items)
    
        
    def receive_packet(self, from_device, status=None):
        
        received_packet = yield self.recv_conns[from_device].get()
        print("Got {} from {} at {}".format(received_packet, from_device, self.env.now))
        self.received_packet = received_packet
        # if status == PacketStatus.SUCCESS:
        #     event_str = "Packet {} received from {}.".format(packet, from_device)
        #     self._num_pkt_received += 1
        # elif status == PacketStatus.LOST:
        #     event_str = "Packet {} from {} is lost.".format(packet, from_device)
        #     self._pkt_loss_count += 1
        # elif status == PacketStatus.COLLIDED:
        #     event_str = "Packet {} from {} collided.".format(packet,from_device)
        #     self._pkt_collision_count += 1


        # self.add_event(timestamp, event_str)


    @property
    def num_pkt_retransmitted(self):
        return self._num_pkt_retransmitted

    @property
    def downlink_loss_count(self):
        return self._downlink_loss_count

    def schedule_retransmission(self):
        pass



class BaseStation(LWSDevice):

    device_type = DeviceType.BASE_STATION
    
    def __init__(self, device_id, x, y, dist, global_config, env):
        super().__init__(device_id, x, y, dist, global_config, env)
        self.received_packet = None
        # env.process(self.recv_pkt_proc())

    def create_sending_connection(self, device_id):
        self.send_conns[device_id] = simpy.Store(self.env)
        return self.send_conns[device_id]
    
    def add_receiving_connection(self, device_id, conn):
        self.recv_conns[device_id] = conn 
    
    def send_packet(self, packet, target_device):
        yield self.send_conns[target_device].put(packet)

    def sim_process(self, env):
        pass

    def yield_from_conn(self, conn):
        yield conn.get()
        # ret = yield conn.get()
        # return ret

    def receive_packet(self, from_device, timestamp):
        recv_conn = self.recv_conns[from_device]
        packet = yield recv_conn.get()
        # print("Received packet {} at {}".format(packet, self.env.now))
        self.received_packet = packet
        # print(packet)
        
    
    def recv_pkt_proc(self):
        print('here')
        recv_conn = self.recv_conns[0]
        while True:
            yield self.env.timeout(5)
            print('loop')
            
            packet = yield recv_conn.get()
            print("Got {} at {}".format(packet, self.env.now))
            yield self.env.timeout(1)
        

def create_full_duplex_connection(end_device, basestation):
    end_device_send_conn = end_device.create_sending_connection(basestation.device_id)
    base_station_send_conn = basestation.create_sending_connection(end_device.device_id)

    end_device.add_receiving_connection(basestation.device_id, base_station_send_conn)
    basestation.add_receiving_connection(end_device.device_id, end_device_send_conn)


if __name__ == "__main__":
    env = simpy.Environment()
    config = ConfigReader("./lora_sim_config.json")
    end_device = EndDevice(0,1,2,3, config, pkt_type=PacketType.Data, env=env)
    print(end_device.sf, end_device.device_type)
